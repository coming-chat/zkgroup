on: [push]

name: CI

jobs:
  build-zkgroup:
    name: Build zkgroup
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            rust: nightly
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            rust: nightly
            os: ubuntu-latest
          - target: armv7-unknown-linux-gnueabihf
            rust: nightly
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            rust: nightly
            os: macos-latest

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Install aarch64 compiler
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: sudo apt install gcc-aarch64-linux-gnu

      - name: Install armhf compiler
        if: ${{ matrix.target == 'armv7-unknown-linux-gnueabihf' }}
        run: sudo apt install gcc-arm-linux-gnueabihf

      - run: rustup target add ${{ matrix.target }}

      - name: Build zkgroup library
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --target=${{ matrix.target }} --release --manifest-path lib/zkgroup/Cargo.toml

      - name: List build output
        run: ls -la lib/zkgroup/target/${{ matrix.target }}/release

      - name: Upload built artifact linux
        if: ${{ matrix.os == 'ubuntu-latest'}}
        uses: actions/upload-artifact@v2
        with:
          name: zkgroup-${{ matrix.target }}
          path: lib/zkgroup/target/${{ matrix.target }}/release/libzkgroup.so
          if-no-files-found: error

      - name: Upload built artifact macos
        if: ${{ matrix.os == 'macos-latest'}}
        uses: actions/upload-artifact@v2
        with:
          name: zkgroup-${{ matrix.target }}
          path: lib/zkgroup/target/${{ matrix.target }}/release/libzkgroup.dylib
          if-no-files-found: error

  update-lib:
    name: update lib in project after build
    if: !startsWith(github.ref, 'refs/tags/v')
    needs:
      - build-zkgroup
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          path: build-artifacts

      - name: git config init
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: git push
        run: | 
          cp ./build-artifacts/zkgroup-x86_64-unknown-linux-gnu/libzkgroup.so ./lib/libzkgroup_linux_x86_64.so      
          cp ./build-artifacts/zkgroup-aarch64-unknown-linux-gnu/libzkgroup.so ./lib/libzkgroup_linux_aarch64.so
          cp ./build-artifacts/zkgroup-armv7-unknown-linux-gnueabihf/libzkgroup.so ./lib/libzkgroup_linux_armv7.so
          cp ./build-artifacts/zkgroup-aarch64-apple-darwin/libzkgroup.dylib ./lib/libzkgroup_darwin_aarch64.dylib
          git add ./lib/
          git commit -m "update lib"
          git push

  release:
    name: Create zkgroup release
    # This ensures that this job only runs on git tags
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - build-zkgroup
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get git tag version
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Set git tag version
        run: |
          echo "VERSION=${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          path: build-artifacts

      - name: Create draft GitHub release page
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body: |
            -
            -
          draft: true
          prerelease: false

      - name: Add zkgroup to release (x86_64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-artifacts/zkgroup-x86_64-unknown-linux-gnu/libzkgroup.so
          asset_name: libzkgroup_linux_x86_64-${{ env.VERSION }}.so
          asset_content_type: application/octet-stream

      - name: Add zkgroup to release (aarch64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-artifacts/zkgroup-aarch64-unknown-linux-gnu/libzkgroup.so
          asset_name: libzkgroup_linux_aarch64_${{ env.VERSION }}.so
          asset_content_type: application/octet-stream

      - name: Add zkgroup to release (armv7)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-artifacts/zkgroup-armv7-unknown-linux-gnueabihf/libzkgroup.so
          asset_name: libzkgroup_linux_armv7_${{ env.VERSION }}.so
          asset_content_type: application/octet-stream

      - name: Add zkgroup to release (aarch64-darwin)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-artifacts/zkgroup-aarch64-apple-darwin/libzkgroup.dylib
          asset_name: libzkgroup_darwin_arm64_${{ env.VERSION }}.dylib
          asset_content_type: application/octet-stream
